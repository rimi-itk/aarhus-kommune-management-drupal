<?php

/**
 * @file
 * Common testing class for this Drupal site.
 */

use GuzzleHttp\Client;

/**
 * Common testing class for this Drupal site.
 *
 * @see https://martsie.github.io/2014/03/26/drupal-breaking-out-of-simpletest/
 */
abstract class SiteTesting extends DrupalWebTestCase {

  /**
   * Overrides default set up handler to prevent database sand-boxing.
   */
  protected function setUp() {
    // Use the test mail class instead of the default mail handler class.
    variable_set('mail_system', array('default-system' => 'TestingMailSystem'));
    $this->originalFileDirectory = variable_get('file_public_path', conf_path() . '/files');
    $this->public_files_directory = $this->originalFileDirectory;
    $this->private_files_directory = variable_get('file_private_path');
    $this->temp_files_directory = file_directory_temp();

    drupal_set_time_limit($this->timeLimit);
    $this->setup = TRUE;
  }

  /**
   * Overrides default tear down handler to prevent database sandbox deletion.
   */
  protected function tearDown() {
    // In case a fatal error occurred that was not in the test process read the
    // log to pick up any fatal errors.
    simpletest_log_read($this->testId, $this->databasePrefix, get_class($this), TRUE);

    $emailCount = count(variable_get('drupal_test_email_collector', array()));
    if ($emailCount) {
      $message = format_plural($emailCount, '1 e-mail was sent during this test.', '@count e-mails were sent during this test.');
      $this->pass($message, t('E-mail'));
    }

    // Close the CURL handler.
    $this->curlClose();
  }

  /**
   * Authorization token.
   *
   * @var array
   */
  protected $authorizationToken;

  /**
   *
   */
  protected function authenticate($refresh = FALSE) {
    if ($refresh) {
      $this->authorizationToken = NULL;
    }
    if (NULL === $this->authorizationToken) {
      $client_id = _aarhus_kommune_management_get_setting(['authentication', 'client_id']);
      $client_secret = _aarhus_kommune_management_get_setting(['authentication', 'client_secret']);

      $this->authorizationToken = $this->post('aarhus-kommune-management/authenticate', [
        'form_params' => [
          'grant_type' => 'client_credentials',
          'client_id' => $client_id,
          'client_secret' => $client_secret,
          'scope' => 'data:write'
        ],
      ]);
    }

    if (NULL === $this->authorizationToken) {
      throw new \RuntimeException('Cannot authenticate!');
    }

    return $this->authorizationToken;
  }

  /**
   *
   */
  protected function get($uri, array $options = []) {
    return $this->request('GET', $uri, $options);
  }

  /**
   *
   */
  protected function post($uri, array $options = []) {
    return $this->request('POST', $uri, $options);
  }

  /**
   *
   */
  protected function request($method, $uri, array $options = []) {
    $uri = $this->getAbsoluteUrl($uri);

    if (!isset($options['headers']['authorization']) && NULL !== $this->authorizationToken) {
      $options['headers']['authorization'] = $this->authorizationToken['token_type'] . ' ' . $this->authorizationToken['access_token'];
    }

    $client = new Client();
    $response = $client->request($method, $uri, $options);

    return json_decode((string) $response->getBody(), TRUE);
  }

}
